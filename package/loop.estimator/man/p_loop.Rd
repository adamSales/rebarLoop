% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/p_loop.R
\name{p_loop}
\alias{p_loop}
\title{P-LOOP Estimator}
\usage{
p_loop(Y, Tr, Z, P, pred = p_rf_interp, ...)
}
\arguments{
\item{Y}{A vector of experimental outcomes.}

\item{Tr}{The treatment assignment vector.}

\item{Z}{A matrix or vector of covariates.}

\item{P}{A vector encoding the pair assignments. Observations with the same value of \code{P} will be assumed to be in the same pair.}

\item{pred}{The prediction algorithm used to impute potential outcomes. By default, this is \code{p_rf_interp}, which uses random forests and interpolates between methods \code{p_rf_ab} and \code{p_rf_s} that treat the pairs as units or treats the individuals as units when making predictions. Another option is \code{p_ols_interp}, which uses linear regression. User written imputation methods may be used as well.}

\item{...}{Arguments to be passed to the imputation method.}
}
\description{
Covariate-adjusted estimator of the average treatment effect in pair randomized experiments. Given a set of experimental data (including observed outcome, treatment assignment, pair assignments, and covariates), uses a method \code{pred} to impute the potential outcomes for each observation, which are then used to estimate the average treatment effect.
}
\examples{
N = 50 # number of pairs

# parameters for the data generating process
b1 = 10
b2 = -5
p1 = 0.9
p2 = 0.5
E = rep(0:1,N)

Z = rbinom(2*N,1,ifelse(E == 0,p1,p2)) # covariates
tau = -10 # treatment effect
P = c(1:N,1:N) # pair assignments

# generate potential outcomes
c = 80 + b1*E + b2*Z + rnorm(2*N,0,2)
t = tau + c

# generate treatment assignments
Tr = rep(0,N*2)
treatments = rbinom(N,1,0.5)
for(i in 1:N){
  Tr[which(P == i)] = c(treatments[i],(1-treatments[i]))
}

Y = ifelse(Tr == 1,t,c) # observed outcomes

# estimate the average treatment effect for the observed data Y, Tr, and Z
print(p_loop(Y,Tr,Z,P,p_rf_ab)) # pairs are treated as units when imputing potential outcomes
print(p_loop(Y,Tr,Z,P,p_rf_s)) # individuals are treated as units when imputing potential outcomes
print(p_loop(Y,Tr,Z,P,p_rf_interp)) # interpolation between the two methods
}
